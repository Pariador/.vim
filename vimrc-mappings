"------MOUSE------
set mouse=

"------UNMAPS------
nnoremap h <nop>
xnoremap h <nop>
onoremap h <nop>

nnoremap : <nop>
onoremap : <nop>
xnoremap : <nop>

nnoremap - <nop>
xnoremap - <nop>
onoremap - <nop>

nnoremap <c-o> <nop>

nnoremap <c-r> <nop>

nnoremap <c-d> <nop>
xnoremap <c-d> <nop>

nnoremap <c-u> <nop>
xnoremap <c-u> <nop>

nnoremap <c-f> <nop>
xnoremap <c-f> <nop>

nnoremap <c-b> <nop>
xnoremap <c-b> <nop>

nnoremap <c-e> <nop>
xnoremap <c-e> <nop>

nnoremap <c-y> <nop>
xnoremap <c-y> <nop>

nnoremap <c-end> <nop>
xnoremap <c-end> <nop>

nnoremap <c-home> <nop>
xnoremap <c-home> <nop>

nnoremap zz <nop>
xnoremap zz <nop>

nnoremap zt <nop>
xnoremap zt <nop>

nnoremap zb <nop>
xnoremap zb <nop>

nnoremap @ <nop>
xnoremap @ <nop>

"------NORMAL-OPERATOR-VISUAL------
" Motions
nnoremap j <left>
nnoremap k <up>
nnoremap l <down>
nnoremap ; <right>

onoremap j <left>
onoremap k <up>
onoremap l <down>
onoremap ; <right>

xnoremap j <left>
xnoremap k <up>
xnoremap l <down>
xnoremap ; <right>

nnoremap q b
nnoremap Q B
onoremap q b
onoremap Q B
xnoremap q b
xnoremap Q B

nnoremap <a-e> ge
nnoremap <a-E> gE
onoremap <a-e> ge
onoremap <a-E> gE
xnoremap <a-e> ge
xnoremap <a-E> gE

nnoremap , ;
onoremap , ;
xnoremap , ;

nnoremap < ,
onoremap < ,
xnoremap < ,

nnoremap 0 ^
onoremap 0 ^
xnoremap 0 ^

nnoremap ^ 0
onoremap ^ 0
xnoremap ^ 0

" Operators
nnoremap <a-d> d^

nnoremap <a-c> c^

nnoremap <tab> >
onoremap <tab> >
xnoremap <tab> >

nnoremap <s-tab> <
onoremap <s-tab> <
xnoremap <s-tab> <

nnoremap @ =
onoremap @ =
xnoremap @ =

nnoremap <silent> <expr> <a-x>
    \ printf('<esc><right>%sx<left>', v:count ? v:count : '')

nnoremap S c<left>

nnoremap <silent> <expr> <a-s>
    \ printf('<esc><right>%ss', v:count ? v:count : '')

nnoremap Y y$
nnoremap <a-y> y^

" Scrolling
nnoremap K <c-u>
xnoremap K <c-u>

nnoremap L <c-d>
xnoremap L <c-d>

nnoremap <a-k> <c-b>
xnoremap <a-k> <c-b>

nnoremap <a-l> <c-f>
xnoremap <a-l> <c-f>

nnoremap <space><space> zz
xnoremap <space><space> zz

nnoremap <space>k zt
xnoremap <space>k zt

nnoremap <space>l zb
xnoremap <space>l zb

nnoremap <up> <c-u>
xnoremap <up> <c-u>

nnoremap <down> <c-d>
xnoremap <down> <c-d>

nnoremap <home> <c-y>
xnoremap <home> <c-y>

nnoremap <end> <c-e>
xnoremap <end> <c-e>

nnoremap <s-home> gg
xnoremap <s-home> gg

nnoremap <s-end> G
xnoremap <s-end> G

" Jumps
nnoremap <c-k> <c-o>
nnoremap <c-l> <c-i>

" Changes
nnoremap <a-[> g;
nnoremap <a-]> g,

" Buffers
nnoremap <silent> <expr> J
    \ printf(':<c-u>%s bprevious<cr>', v:count ? v:count : '')
nnoremap <silent> <expr> :
    \ printf(':<c-u>%s bnext<cr>', v:count ? v:count : '')

" Args
nnoremap <silent> <expr> <a-j>
    \ printf(':<c-u>%s previous<cr>', v:count ? v:count : '')
nnoremap <silent> <expr> <a-;>
    \ printf(':<c-u>%s next<cr>', v:count ? v:count : '')

" quickfix lists
nnoremap <silent> <expr> -
    \ printf(':<c-u>%s cprevious<cr>', v:count ? v:count : '')
nnoremap <silent> <expr> =
    \ printf(':<c-u>%s cnext<cr>', v:count ? v:count : '')

nnoremap <silent> <expr> <a-->
    \ printf(':<c-u>colder %s<cr>', v:count ? v:count : '')
nnoremap <silent> <expr> <a-=>
    \ printf(':<c-u>cnewer %s<cr>', v:count ? v:count : '')

" location lists
nnoremap <silent> <expr> _
    \ printf(':<c-u>%s lprevious<cr>', v:count ? v:count : '')
nnoremap <silent> <expr> +
    \ printf(':<c-u>%s lnext<cr>', v:count ? v:count : '')

nnoremap <silent> <expr> <a-_>
    \ printf(':<c-u>lolder %s<cr>', v:count ? v:count : '')
nnoremap <silent> <expr> <a-+>
    \ printf(':<c-u>lnewer %s<cr>', v:count ? v:count : '')

" Marks
nnoremap <a-'> m
onoremap <a-'> m
xnoremap <a-'> m

nnoremap ' `
onoremap ' `
xnoremap ' `

nnoremap " '
onoremap " '
xnoremap " '

" Registers & Macros
nnoremap b "
xnoremap b "

nnoremap B q
xnoremap B q

nnoremap > @
xnoremap > @

nnoremap >> @@
xnoremap >> @@

nnoremap >` @:
xnoremap >` @:

" Undo & Redo
nnoremap U <c-r>

nnoremap <a-u> g-
nnoremap <a-U> g+

nnoremap <c-u> U

" open line
function s:AddBlanks(direction, mode)
    if a:mode == 'n'
        let l:line = line('.') - 1 + a:direction
    elseif a:mode == 'v'
        let l:line = a:direction ? line("'>") : line("'<") - 1
    endif

    let l:blanks = repeat([''], v:count ? v:count : 1)

    call append(l:line, l:blanks)
endfunction

nnoremap <silent> [o :<c-u>call <sid>AddBlanks(0, 'n')<cr>
nnoremap <silent> ]o :<c-u>call <sid>AddBlanks(1, 'n')<cr>

xnoremap <silent> [o :<c-u>call <sid>AddBlanks(0, 'v')<cr>gv
xnoremap <silent> ]o :<c-u>call <sid>AddBlanks(1, 'v')<cr>gv

nmap <a-O> [o
nmap <a-o> ]o

" move
nnoremap <silent> <expr> M
    \ printf(':<c-u>move .-%s<cr>', v:count < 2 ? 2 : v:count + 1)
nnoremap <silent> <expr> m
    \ printf(':<c-u>move .+%s<cr>', v:count ? v:count : 1)

xnoremap <silent> <expr> M
    \ printf("<esc>:'<,'>move %s<cr>%s", v:count ? '.-' . (v:count + 1) : "'<-2", v:count ? '' : 'gv')
xnoremap <silent> <expr> m
    \ printf("<esc>:'<,'>move %s<cr>%s", v:count ? '.+' . v:count : "'>+1", v:count ? '' : 'gv')

" xnoremap <silent> [o :call append(line("'<") - 1, '')<cr>
" xnoremap <silent> ]o :call append(line("'>"), '')<cr>

" haul (duplicate)
" nmap H <Plug>(LineJugglerDupRangeUp)
" nmap h <Plug>(LineJugglerDupRangeDown)

" xmap H <Plug>(LineJugglerDupRangeUp)
" xmap h <Plug>(LineJugglerDupRangeDown)

" Clipboard
nnoremap gd "+d
xnoremap gd "+d

nnoremap gD "+D
nnoremap g<a-d> "+d^

nnoremap gy "+y
xnoremap gy "+y

nnoremap gY "+y$
nnoremap g<a-y> "+y^

nnoremap gp "+p
xnoremap gp "+p

nnoremap gP "+P
xnoremap gP "+P

" ToggleRelativeNumbers
nnoremap <silent> <space>1 :NumbersToggle<cr>

"Clear search highlights on CTRL-C.
noremap <silent> <c-c> <c-c>:noh<cr>

"------INSERT------
"Completion
inoremap <a-k> <c-p>
inoremap <a-l> <c-n>

"Excute normal command.
inoremap <s-esc> <c-o>

"------EX------
nnoremap <expr> ` v:count ? printf(':<c-u>.,.+%d', v:count) : ':'
onoremap ` :
xnoremap ` :

nmap ]` `
nnoremap <expr> [` v:count ? printf(':<c-u>.-%d,.', v:count) : ':'

nnoremap ~ Q

nnoremap <a-`> gQ

nnoremap g` q:
xnoremap g` q:

nnoremap g/ q/

nnoremap g? q?

nmap <expr> <space>` '`norm '
nmap <expr> <space>]` ']`norm '
nmap <expr> <space>[` '[`norm '

cabbrev te tabedit

"------WINDOW------
" Unmap
nnoremap <c-w>h <nop>
nnoremap <c-w><a-h> <nop>
nnoremap <c-w>H <nop>

" Esc
nnoremap <expr> <c-w><esc> '\<nop\>'

nnoremap <c-w>j <c-w><left>
nnoremap <c-w>k <c-w><up>
nnoremap <c-w>l <c-w><down>
nnoremap <c-w>; <c-w><right>

nnoremap <c-w><a-j> <c-w>H
nnoremap <c-w><a-k> <c-w>K
nnoremap <c-w><a-l> <c-w>J
nnoremap <c-w><a-;> <c-w>L

" WindowSwap
nnoremap <silent> <c-w>m :call WindowSwap#EasyWindowSwap()<cr>
nmap <c-w>J <c-w>m<c-w>j<c-w>m
nmap <c-w>K <c-w>m<c-w>k<c-w>m
nmap <c-w>L <c-w>m<c-w>l<c-w>m
nmap <c-w>: <c-w>m<c-w>;<c-w>m

"------SPACE------
" Esc
nnoremap <expr> <space><esc> '\<nop\>'

nnoremap <silent> <space>f :NERDTreeToggle<cr>
nnoremap <silent> <space>b :BuffergatorToggle<cr>

""------ESCAPE------
"" Esc
"nnoremap <expr> <esc><esc> '\<nop\>'

""Toggle between relative and absolute line numvers.
"nnoremap <silent> <esc>n :NumbersToggle<cr>

""Show highlight group.
"nnoremap <silent> <esc>h :so $VIMRUNTIME/syntax/hitest.vim<cr>

"------LEADER------
nnoremap <expr> <leader><esc> '\<nop\>'
